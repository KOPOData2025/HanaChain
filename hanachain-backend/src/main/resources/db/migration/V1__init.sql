-- Hanachain Database 초기 Migration
-- Flyway Version: V1
-- Description: Hanachain 애플리케이션의 초기 데이터베이스 schema

-- users 테이블 생성
CREATE TABLE users (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(50) NOT NULL UNIQUE,
    email VARCHAR2(100) NOT NULL UNIQUE,
    password_hash VARCHAR2(255) NOT NULL,
    full_name VARCHAR2(100),
    wallet_address VARCHAR2(42),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_active NUMBER(1) DEFAULT 1,
    CONSTRAINT chk_is_active CHECK (is_active IN (0, 1))
);

-- wallets 테이블 생성
CREATE TABLE wallets (
    wallet_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER NOT NULL,
    wallet_address VARCHAR2(42) NOT NULL UNIQUE,
    wallet_type VARCHAR2(20) DEFAULT 'EXTERNAL',
    balance NUMBER(38, 18) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_wallet_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT chk_wallet_type CHECK (wallet_type IN ('EXTERNAL', 'INTERNAL'))
);

-- transactions 테이블 생성
CREATE TABLE transactions (
    transaction_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tx_hash VARCHAR2(66) NOT NULL UNIQUE,
    from_address VARCHAR2(42) NOT NULL,
    to_address VARCHAR2(42) NOT NULL,
    amount NUMBER(38, 18) NOT NULL,
    gas_price NUMBER(38, 18),
    gas_limit NUMBER,
    gas_used NUMBER,
    block_number NUMBER,
    block_timestamp TIMESTAMP,
    status VARCHAR2(20) DEFAULT 'PENDING',
    transaction_type VARCHAR2(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT chk_tx_status CHECK (status IN ('PENDING', 'CONFIRMED', 'FAILED', 'REVERTED')),
    CONSTRAINT chk_tx_type CHECK (transaction_type IN ('TRANSFER', 'CONTRACT_CALL', 'CONTRACT_DEPLOY'))
);

-- fraud_detection_logs 테이블 생성
CREATE TABLE fraud_detection_logs (
    log_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    transaction_id NUMBER,
    risk_score NUMBER(5, 2),
    risk_level VARCHAR2(20),
    detection_rules CLOB,
    is_flagged NUMBER(1) DEFAULT 0,
    review_status VARCHAR2(20) DEFAULT 'PENDING',
    reviewed_by NUMBER,
    reviewed_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_fraud_transaction FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id) ON DELETE CASCADE,
    CONSTRAINT fk_fraud_reviewer FOREIGN KEY (reviewed_by) REFERENCES users(user_id),
    CONSTRAINT chk_is_flagged CHECK (is_flagged IN (0, 1)),
    CONSTRAINT chk_risk_level CHECK (risk_level IN ('LOW', 'MEDIUM', 'HIGH', 'CRITICAL')),
    CONSTRAINT chk_review_status CHECK (review_status IN ('PENDING', 'APPROVED', 'REJECTED', 'UNDER_REVIEW'))
);

-- audit_logs 테이블 생성
CREATE TABLE audit_logs (
    audit_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER,
    action VARCHAR2(50) NOT NULL,
    entity_type VARCHAR2(50),
    entity_id NUMBER,
    old_value CLOB,
    new_value CLOB,
    ip_address VARCHAR2(45),
    user_agent VARCHAR2(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_audit_user FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- 성능을 위한 index 생성
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_wallet_address ON users(wallet_address);
CREATE INDEX idx_wallets_user_id ON wallets(user_id);
CREATE INDEX idx_wallets_address ON wallets(wallet_address);
CREATE INDEX idx_transactions_hash ON transactions(tx_hash);
CREATE INDEX idx_transactions_from ON transactions(from_address);
CREATE INDEX idx_transactions_to ON transactions(to_address);
CREATE INDEX idx_transactions_status ON transactions(status);
CREATE INDEX idx_transactions_block ON transactions(block_number);
CREATE INDEX idx_fraud_transaction_id ON fraud_detection_logs(transaction_id);
CREATE INDEX idx_fraud_risk_level ON fraud_detection_logs(risk_level);
CREATE INDEX idx_fraud_flagged ON fraud_detection_logs(is_flagged);
CREATE INDEX idx_audit_user_id ON audit_logs(user_id);
CREATE INDEX idx_audit_created_at ON audit_logs(created_at);

-- sequence 생성 (IDENTITY columns를 사용하지 않는 경우)
-- CREATE SEQUENCE users_seq START WITH 1 INCREMENT BY 1;
-- CREATE SEQUENCE wallets_seq START WITH 1 INCREMENT BY 1;
-- CREATE SEQUENCE transactions_seq START WITH 1 INCREMENT BY 1;
-- CREATE SEQUENCE fraud_detection_logs_seq START WITH 1 INCREMENT BY 1;
-- CREATE SEQUENCE audit_logs_seq START WITH 1 INCREMENT BY 1;

-- 기본 admin 사용자 추가 (운영 환경에서는 password를 해시화해야 함)
INSERT INTO users (username, email, password_hash, full_name, is_active)
VALUES ('admin', 'admin@hanachain.com', '$2a$10$YourHashedPasswordHere', 'System Administrator', 1);

COMMIT;
